@use 'sass:math';
@use 'sass:map';

@import url("https://fonts.googleapis.com/css?family=Raleway:400,400i,700");
  
*, *::before, *::after {
    padding: 0;
    margin: 0 auto;
    box-sizing: border-box;
}

:root {
  --perspective: 600px;
}

body {
  font-family: Raleway, sans-serif;
  background-color: #222;
  color: #fff;
  min-height: 100vh;
  display: grid;
  place-items: center;
  overflow: hidden;
  perspective: var(--perspective);
  
  *:not(:empty) {
    transform-style: preserve-3d;
  }
}

#cb {
  display: none;
    
  &:checked ~ .scene {
    --animation: flyThrough 24s -18s;
  }
  &:checked ~ .view {
    --dir: 1;
  }
}

.view {
  position: fixed;
  bottom: 0;
  background-color: #0005;
  padding: 0.75em;
  transform: translateZ(0px);
  
  label {
    display: flex;
    gap: 0.25em;
    align-items: center;
  }
  
  .sw {
    border: 1px solid;
    display: inline-block;
    display: grid;
    place-items: center;
    border-radius: 1em;
    padding: 0.1em 0.4em;
    
    &::after {
      content: '';
      display: inline-block;
      width: 0.4em; height: 0.4em;
      border-radius: 50%;
      background-color: #fff;
      transform: translateX(calc(var(--dir, -1) * 0.2em));
      transition: transform 0.3s;
    }
  }
  
  .ov { opacity: calc(0.7 + var(--dir, -1) * -0.3); }
  .ft { opacity: calc(0.7 + var(--dir, -1) * 0.3); }
}

.scene {
  position: relative;
  pointer-events: none;
  animation: var(--animation, scene 48s) infinite linear;
  
  @keyframes scene {
    from { transform: rotateX(-45deg) rotateY(0deg); }
    to { transform: rotateX(-45deg) rotateY(360deg); }
  }
  
  &::before {
    content: '';
    position: absolute;
    inset: -75em;
    background-image:
      radial-gradient(closest-side, transparent, #222),
      repeating-linear-gradient(#fff1 0 1px, transparent 0 1em),
      repeating-linear-gradient(90deg, #fff1 0 1px, transparent 0 1em);
    transform: rotateX(90deg) translateZ(-7em);
  }
}

.shadow {
  position: absolute;
  inset: -16em -28em;
  transform: rotateX(90deg) translateZ(-7.1em);
  filter: blur(1em);

  &::before, &::after {
    content: '';
    position: absolute;
    left: var(--left, 2em); top: 2em;
    width: 28em; height: 28em;
    background-image:
      radial-gradient(closest-side, #222 10em, transparent 0),
      conic-gradient(from var(--from, 90deg), transparent, #000);
    border-radius: 50%;
  }
  
  &::after {
    --left: 26em;
    --from: 270deg;
  }
}

.ring {
  position: absolute;
}

$count: 72;
$halfCount: $count / 2;
$flyThroughMap: ();

@for $i from 0 through $count {
  
  $dir: floor($i / $halfCount) * 2 - 1;
  
  $angle: math.abs(360deg - ($i * 360deg / $halfCount)) - 270deg;
  
  $ringX: ($dir * 10em) + math.sin($angle) * -10em * $dir;
  $ringY: math.sin(360deg / $count * $i + 90deg) * 5em;
  $ringZ: math.cos($angle) * 10em * $dir;
  
  $ringRY: 90deg - $angle;
  $ringRX: math.sin(360deg / $count * $i) * -15deg;
  
  @if ($i < $count) {
    .ring:nth-child(#{$i + 2}) {
      --hue: #{360 / $count * $i};
      --delay: #{24s / $count * $i * -1};
      transform:
        translate3d(#{$ringX}, #{$ringY}, #{$ringZ})
        rotateY(#{$ringRY})
        rotateX(#{$ringRX});
    }   
  }
    
  $flyThroughMap: map.set($flyThroughMap, #{100% - 100% / $count * $i},
    translate3d(#{$ringX}, #{$ringY}, calc(#{$ringZ} + var(--perspective)))
    rotateY(#{$ringRY})
    rotateX(#{$ringRX * -0.2})
  );
}

@keyframes flyThrough {
  @each $key, $value in $flyThroughMap {
    #{$key} { transform: #{$value}; }
  }
}

i {
  position: absolute;
  inset: -.275em -.55em;
  background-color: hsl(var(--hue), 50%, var(--light));
  transform: rotateX(90deg) rotateY(var(--ry, 0)) translateZ(1em);
  
  @for $i from 0 to 6 {
    &:nth-child(#{$i + 1}) {
      --ry: #{$i * 60deg};
      --light: #{80 - (3 - abs(3 - $i)) * 15};
    }
  }
}